apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'


android {
    signingConfigs {

    }
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.kollins.sofia"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation "com.android.support:support-v4:26+"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation "org.powermock:powermock-module-junit4:1.6.5"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.6.5"
    testImplementation "org.powermock:powermock-api-mockito:1.6.5"
    testImplementation "org.powermock:powermock-classloading-xstream:1.6.5"
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
}

jacoco {
    version "0.7.1.201405082137"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug/com/example/kollins/sofia',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])
    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebugUnitTest.exec')
    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "SOFIA"
        property "sonar.projectKey", "com.example.kollins.sofia"
        property "sonar.language","java"
        property "sonar.jacoco.reportPaths", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.junit.reportsPath", "build/test-results/debug"
    }
}
